Задание 7

Спроектируйте АТД HashTable на основе концепции (не шаблона) хэш-таблицы из занятия по алгоритмам и выполните его реализацию.

В данном задании мы отказываемся от индексации и используем хэш-таблицу исключительно как хранилище неупорядоченных значений
с возможностью их добавления и удаления и с быстрой проверкой за O(1), принадлежит ли некоторое значение этой таблице.

Учитывайте, что попытка добавления нового элемента в хэш-таблицу может закончиться неудачей
(например, из-за ограничений механизма разрешения коллизий).

Сделайте единственный параметром конструктора максимальный размер хэш-таблицы.
Более универсальный способ, конечно, обойтись без такого ограничения:
расширить хэш-таблицу возможностями динамического массива,
чтобы при её полном заполнении внутренний буфер автоматически увеличивался.

Решение задания 7.

1. Определим тип АТД:
HashTable<T>

2. Сформируем сигнатуры всех методов АТД (без их реализации):
abstract class HashTable<T>

    public int hashFun(T value);
    public void put(T value);
    public void remove(T value);
    public T find(T value);
    public int size();

3. Для каждого метода (при необходимости) задаем набор условий, ограничений на его работу (ПРЕДУСЛОВИЯ)

    public int hashFun(T value);
    public void put(T value);
    public remove(T value); //предусловие: таблица не пуста
    public T find(T value); // предусловие: таблица не пуста
    public int size();
    public int capacity();

4. Определим, что в объекте меняется после вызова того или иного метода (ПОСТУСЛОВИЯ)
    Выпишем функции для которых есть постусловия.

    public int hashFun(T value);

    //постусловие: в таблицу добавился один элемент (емкость уменьшилась)
    public void put(T value);

    //предусловие: таблица не пуста
    //постусловие: таблица уменьшилась на один элемент (емкость увеличилась)
    public remove(T value);

    // предусловие: таблица не пуста
    public T find(T value);

    public int size();

    public int capacity();

5. Конструктор.
    Объекты создаются вызовом особой функции класса.

    // конструктор
    public HashTable<T> HashTable(); // постусловие: создана пустая таблица

6. Определим какие функции являются командами а какие запросами (пересмотрим методы)

    public int hashFun(T value);

    //постусловие: в таблицу добавился один элемент (емкость уменьшилась)
    public void put(T value); //команда

    //предусловие: таблица не пуста
    //постусловие: таблица уменьшилась на один элемент (емкость увеличилась)
    public remove(T value); //команда

    // предусловие: таблица не пуста
    public T find(T value); запрос (чистая функция)

    public int size(); // запрос (чистая функция)

    public int capacity(); // запрос (чистая функция)


7. Определим отдельные (дополнительные) запросы для статуса команд.
    Возвращают статус выполнения команд у которых есть ПРЕДУСЛОВИЯ.
    Выпишем команды имеющие предусловия и требующие дополнительных запросов.

        public int hashFun(T value); //запрос (чистая функция)

        //предусловие: hashFun вернул свободный слот
        //постусловие: в таблицу добавился один элемент (емкость уменьшилась)
        public void put(T value); //команда

        public const int PUT_OK = 1; // последний put отработал нормально (успешно)
        public const int PUT_ER = 2; // hashFun вернул не свободный слот

        //предусловие: таблица не пуста
        //постусловие: таблица уменьшилась на один элемент (емкость увеличилась)
        public remove(T value); //команда

        public const int REMOVE_OK = 1; // последний remove отработал нормально (успешно)
        public const int REMOVE_ER = 2; // таблица пуста

        // предусловие: таблица не пуста
        public T find(T value); //запрос (чистая функция)

        public int size(); // запрос (чистая функция)

        public int capacity(); // запрос (чистая функция)



8. Финальная версия АТД HashTable

   abstract class HashTable<T>

    // конструктор
    public HashTable<T> HashTable(); // постусловие: создана пустая таблица

    public int hashFun(T value); //запрос (чистая функция)

    //предусловие: hashFun вернул свободный слот
    //постусловие: в таблицу добавился один элемент (емкость уменьшилась)
    public void put(T value); //команда

    //предусловие: таблица не пуста
    //постусловие: таблица уменьшилась на один элемент (емкость увеличилась)
    public remove(T value); //команда

    // предусловие: таблица не пуста
    public T find(T value); //запрос (чистая функция)

    public int size(); // запрос (чистая функция)

    public int capacity(); // запрос (чистая функция)


    //запросы статусов
    public int get_put_status(); // успешно; hashFun вернул не свободный слот
    public int get_remove_status(); // успешно; таблица пуста