1. Определим тип АТД:
DynArray<T>

2. Сформируем сигнатуры всех методов АТД (без их реализации):
abstract class DynArray<T>
    public void makeArray(int value);
    public T getItem(int value);
    public void Append(T);
    public void Insert(T, int value);
    public void Remove(int value);
    public int size();

3. Для каждого метода (при необходимости) задаем набор условий, ограничений на его работу (ПРЕДУСЛОВИЯ)

    public void makeArray(int value); //предусловие: массив создается впервые или текущий массив полон
    public T getItem(int value); //предусловие: массив не пустой
    public void Append(T); //предусловие: массив создается впервые
    public void Insert(T, int value); //предусловие: массив создается впервые
    public void Remove(int value); //предусловие: массив не пустой
    public int size();

4. Определим, что в объекте меняется после вызова того или иного метода (ПОСТУСЛОВИЯ)
    Выпишем функции для которых есть постусловия.

    //предусловие: массив заданного размера создается впервые или текущий массив заданного размера полон
    //постусловие: массив увеличивается на заданный размер
    public void makeArray(int value);

    //предусловие: массив не пустой
    //постусловие: нет
    public T getItem(int value);

    //предусловие: массив создается впервые
    //постусловие: добавляется новый объект в хвост массива
    //постусловие: создается условие для увеличения размера массива, если будет произведена эта операция еще раз
    public void Append(T);

    //предусловие: массив создается впервые
    //постусловие: добавляется новый объект по индексу
    //постусловие: создается условие для увеличения размера массива, если будет произведена эта операция еще раз
    public void Insert(T, int value);

    //предусловие: массив не пустой
    //постусловие: освобождается ячейка для вставки нового значения
    //постусловие: создается условие для уменьшения размера массива
    public void Remove(int value);

    public int size();

5. Конструктор.
    Объекты создаются вызовом особой функции класса.

    // конструктор
    public DynArray<T> DynArray(); // постусловие: создан пустой массив фиксированного размера

6. Определим какие функции являются команами а какие запросами (пересмотрим методы)

    //предусловие: массив заданного размера создается впервые или текущий массив заданного размера полон
    //постусловие: массив увеличивается на заданный размер
    public void makeArray(int value); //команда

    //предусловие: массив не пустой
    //постусловие: нет
    public T getItem(int value); //запрос (чистая функция)

    //предусловие: массив создается впервые
    //постусловие: добавляется новый объект в хвост массива
    //постусловие: создается условие для увеличения размера массива, если будет произведена эта операция еще раз
    public void Append(T); //команда

    //предусловие: массив создается впервые
    //постусловие: добавляется новый объект по индексу
    //постусловие: создается условие для увеличения размера массива, если будет произведена эта операция еще раз
    public void Insert(T, int value); //команда

    //предусловие: массив не пустой
    //постусловие: освобождается ячейка для вставки нового значения
    //постусловие: создается условие для уменьшения размера массива
    public void Remove(int value); //команда

    public int size(); //запрос (чистая функция)


7. Определим отдельные (дополнительные) запросы для статуса команд.
    Возвращают статус выполнения команд у которых есть ПРЕДУСЛОВИЯ.
    Выпишем команды имеющие предусловия и требующие дополнительных запросов.

    //предусловие: массив заданного размера создается впервые или текущий массив заданного размера полон
    //постусловие: массив увеличивается на заданный размер
    public void makeArray(int value); //команда

    public const int MAKE_ARRAY_NIL = 0; // makeArray еще не вызывался
    public const int MAKE_ARRAY_OK = 1; // последний makeArray отработал нормально
    public const int MAKE_ARRAY_ER = 2; // текущий массив заданного размера не полон

    //предусловие: массив создается впервые
    //постусловие: добавляется новый объект в хвост массива
    //постусловие: создается условие для увеличения размера массива, если будет произведена эта операция еще раз
    public void Append(T); //команда

    public const int APPEND_NIL = 0; // Append еще не вызывался
    public const int APPEND_OK = 1; // последний Append отработал нормально

    //предусловие: массив создается впервые
    //постусловие: добавляется новый объект по индексу
    //постусловие: создается условие для увеличения размера массива, если будет произведена эта операция еще раз
    public void Insert(T, int value); //команда

    public const int INSERT_NIL = 0; //makeArray еще не вызывался
    public const int INSERT_OK = 1; // последний Insert отработал нормально
    public const int INSERT_ER = 2; // ячейка с индексом уже занята

    //предусловие: массив не пустой
    //постусловие: освобождается ячейка для вставки нового значения
    //постусловие: создается условие для уменьшения размера массива
    public void Remove(int value); //команда

    public const int REMOVE_NIL = 0; // makeArray еще не вызывался
    public const int REMOVE_OK = 1; // последний Remove отработал нормально
    public const int REMOVE_ER = 2; // объекты в массиве отсутствуют


8. Финальная версия АТД DynArray

    abstract class DynArray<T>

    // конструктор
        public DynArray<T> DynArray(); // постусловие: создан пустой массив фиксированного размера

    // команды
    //предусловие: массив заданного размера создается впервые или текущий массив заданного размера полон
    //постусловие: массив увеличивается на заданный размер
    public void makeArray(int value); //команда

    //предусловие: массив создается впервые
    //постусловие: добавляется новый объект в хвост массива
    //постусловие: создается условие для увеличения размера массива, если будет произведена эта операция еще раз
    public void Append(T); //команда

    //предусловие: массив создается впервые
    //постусловие: добавляется новый объект по индексу
    //постусловие: создается условие для увеличения размера массива, если будет произведена эта операция еще раз
    public void Insert(T, int value); //команда

    //предусловие: массив не пустой
    //постусловие: освобождается ячейка для вставки нового значения
    //постусловие: создается условие для уменьшения размера массива
    public void Remove(int value); //команда

    //запросы
    //предусловие: массив не пустой
    //постусловие: нет
    public T getItem(int value); //запрос (чистая функция)

    public int size(); //запрос (чистая функция)

    //запросы статусов
    public int get_makeArray_status; // возвращает значение MAKE_ARRAY_*
    public int get_Append_status; // возвращает значение APPEND_*
    public int get_Insert_status; // возвращает значение INSERT_*
    public int get_Remove_status; // возвращает значение REMOVE_*
