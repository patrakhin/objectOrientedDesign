Решение задания 2.

2.1. Опишите АТД LinkedList с предложенным набором операций.
     Разделите операции на запросы и команды.
     Добавьте где необходимо предусловия и постусловия.
     Добавьте запросы статуса команд, для работы которых требуются предусловия
     (учитывайте в частности случаи, когда список пустой).

    abstract class LinkedList<T>

        public const int PUT_RIGHT_NIL = 0; // add_tail еще не вызывался
        public const int PUT_RIGHT_OK = 1; //  последний put_right отработал нормально
        public const int PUT_RIGHT_ERR = 2; // список пуст

        public const int PUT_LEFT_NIL = 0; // add_tail еще не вызывался
        public const int PUT_LEFT_OK = 1; //  последний put_left отработал нормально
        public const int PUT_LEFT_ERR = 2; // список пуст

        public const int REPLACE_NIL = 0; // add_tail еще не вызывался
        public const int REPLACE_OK = 1; //  последний replace отработал нормально
        public const int REPLACE_ERR = 2; // список пуст

        public const int FIND_NIL = 0; // add_tail еще не вызывался
        public const int FIND_OK = 1; //  последний find отработал нормально
        public const int FIND_ERR = 2; // конец списка (хвост)

        public const int REMOVE_ALL_NIL = 0; // add_tail еще не вызывался
        public const int REMOVE_ALL_OK = 1; //  последний remove_all отработал нормально
        public const int REMOVE_ALL_ERR = 2; // узлы с заданным значением отсутствуют

        public const int ADD_TAIL_NIL = 0; // add_tail еще не вызывался
        public const int ADD_TAIL_OK = 1; //  add_tail выполнился самый первый раз

        //конструктор
        public LinkedList<T> LinkedList(); // постусловие: создан пустой список

        //команды
        // предусловие: список не пустой
        // постусловие: вставляется за текущим узлом новый узел с заданным значением
        public void put_right(T value);

        // предусловие: список не пустой
        // постусловие: вставляется перед текущим узлом новый узел с заданным значением
        public void put_left(T value);

        // постусловие: из списка удаляются все значения
        public void clear();

        // постусловие: в список добавляется новое значение
        public void add_tail(T value);

        // предусловие: список не пустой
        // постусловие: заменено значение текущего узла на заданное
        public void replace(T value);

        // предусловие: список не пустой
        public void find(T value);

        // предусловие: список не пустой
        // постусловие: в списке удалены все узлы с заданным значением
        public void remove_all(T value);

        //запросы
        // предусловие: список не пустой
        public void head();

        // предусловие: список не пустой
        public void tail();

        // предусловие: справа есть узел
        public void right();

        // предусловие: список не пустой
        public T get();

        public int size();

        // предусловие: список не пустой
        public boolean is_head();

        // предусловие: список не пустой
        public boolean is_tail();

        public boolean is_value();

        //дополнительные запросы
        public int put_right_status(); // возвращает значение PUT_RIGHT_*
        public int put_left_status(); // возвращает значение  PUT_LEFT_*
        public int replace_status(); // возвращает значение REPLACE_*
        public int find_status(); // возвращает значение FIND_*
        public int remove_all_status(); // возвращает значение REMOVE_ALL_*
        public int add_tail_status(); // возвращает значение  ADD_TAIL_*

2.2. Почему операция tail не сводима к другим операциям (если исходить из эффективной реализации)?
Исходя из имеющихся команд, наиболее подходящая для выражения через нее операции tail это right,
но мы можем сдвинуть всего лишь на один узел вправо, соответственно,
чтоб добраться до хвоста нам понадобится цикл и понадобится проверка,
что следующий узел за текущим отсутствует. Таким образом мы выполняем предварительные действия.
Следовательно, из всех операций, tail не сводима к другим - атомарная.

2.3. Операция поиска всех узлов с заданным значением, выдающая список таких узлов, уже не нужна. Почему?
Данную операцию можно выразить через find(значение)
