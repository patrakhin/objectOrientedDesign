Рефлексия задания 7

*В скобках приведены верные решения.

1. Тип АТД определен верно.
HashTable<T>

2. Сформируем сигнатуры всех методов АТД (без их реализации):
abstract class HashTable<T>

    public int hashFun(T value); // метод ненужен т.к. по условию у нас есть система коллизий.
    public void put(T value); // сформирован верно
    public void remove(T value); // сформирован верно
    // сформирован не верно (public bool get(T value);)т.к. нужно не возвращать значение,
    а выполнять проверку на присутствие значения в хэш-таблице
    public T find(T value);

    public int size(); // сформирован верно

3. Для каждого метода (при необходимости) задаем набор условий, ограничений на его работу (ПРЕДУСЛОВИЯ)

    //предусловие: таблица не пуста - не корректное предусловие (в таблице имеется свободный слот для value;)
    здесь неверно было бы написать, что в таблице отсутствует value - т.к. мы кладем в таблицу случайные значения.
    Для этого и существует система коллизий.
    public void put(T value);

    // предусловие: таблица не пуста - не корректное предусловие (в таблице имеется значение value;)
    Т.к. удаляем определенное значение value.
    public void remove(T value);

4. Определим, что в объекте меняется после вызова того или иного метода (ПОСТУСЛОВИЯ)
    Выпишем функции для которых есть постусловия.

    //постусловие: в таблицу добавился один элемент (емкость уменьшилась)
    - не корректное постусловие(в таблицу добавлено новое значение) и емкость не нужна, т.к. это уже реализация метода.
    public void put(T value);

    //постусловие: таблица уменьшилась на один элемент (емкость увеличилась)
    - не корректное постусловие (из таблицы удалено значение value)
    public remove(T value);

5. Конструктор.
    Объекты создаются вызовом особой функции класса.

    // конструктор
    // постусловие: создана пустая таблица - не корректное (создана пустая хэш-таблица заданного размера).
    Согласно заданию, фиксированный размер, определенный в конструкторе.
    Соответственно и конструктор - не верный (public HashTable<T> HashTable(int sz);).
    public HashTable<T> HashTable();

6. Определим какие функции являются командами а какие запросами (пересмотрим методы)

    public int hashFun(T value); - не верно (т.к. это уже реализация АТД)

    public void put(T value); //команда - верно

    public remove(T value); //команда - верно

    public T find(T value); запрос (чистая функция) - не верно, т.к. сама функция спроектирована не верно.

    public int size(); // запрос (чистая функция) - верно

    public int capacity(); // запрос (чистая функция)  - не нужен (т.к. это уже реализация АТД)


7. Определим отдельные (дополнительные) запросы для статуса команд.
    Возвращают статус выполнения команд у которых есть ПРЕДУСЛОВИЯ.
    Выпишем команды имеющие предусловия и требующие дополнительных запросов.

        //предусловие: hashFun вернул свободный слот - не верно
        public void put(T value); //команда

        public const int PUT_OK = 1; // последний put отработал нормально (успешно) - верно

        // hashFun вернул не свободный слот - не верный комментарий
        (система коллизий не смогла найти свободный слот для значения)
        public const int PUT_ER = 2;

        //предусловие: таблица не пуста - не верно
        //постусловие: таблица уменьшилась на один элемент (емкость увеличилась) - не верно
        public remove(T value); //команда

        public const int REMOVE_OK = 1; // последний remove отработал нормально (успешно) - верно
        public const int REMOVE_ER = 2; // таблица пуста - верно

        // предусловие: таблица не пуста
        public T find(T value); //запрос (чистая функция)

        //запросы статусов
        // успешно; hashFun вернул не свободный слот - не верно
        public int get_put_status();  - наименование верно

        // успешно; таблица пуста - верно
        public int get_remove_status(); - наименование верно