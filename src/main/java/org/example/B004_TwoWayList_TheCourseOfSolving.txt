

abstract class ParentList<T>

  // конструктор
// постусловие: создан новый пустой список
  public ParentList<T> ParentList();

  // команды
// предусловие: список не пуст;
// постусловие: курсор установлен на первый узел в списке
  public void head();

// предусловие: список не пуст;
// постусловие: курсор установлен на последний узел в списке
  public void tail();

// предусловие: правее курсора есть элемент;
// постусловие: курсор сдвинут на один узел вправо
  public void right();

// предусловие: список не пуст;
// постусловие: следом за текущим узлом добавлен
// новый узел с заданным значением
  public void put_right(T value);

// предусловие: список не пуст;
// постусловие: перед текущим узлом добавлен
// новый узел с заданным значением
  public void put_left(T value);

 // предусловие: список не пуст;
// постусловие: текущий узел удалён,
// курсор смещён к правому соседу, если он есть,
// в противном случае курсор смещён к левому соседу,
// если он есть
  public void remove();

// постусловие: список очищен от всех элементов
  public void clear();

// постусловие: новый узел добавлен в хвост списка
  public void add_tail(T value);

// постусловие: в списке удалены все узлы с заданным значением
  public void remove_all(T value);

// предусловие: список не пуст;
// постусловие: значение текущего узла заменено на новое
  public void replace(T value);

// постусловие: курсор установлен на следующий узел
// с искомым значением, если такой узел найден
  public void find(T value);

  // запросы
  public T get(); // предусловие: список не пуст
  public bool is_head();
  public bool is_tail();
  public bool is_value();
  public int size();

  // запросы статусов (возможные значения статусов)
  public int get_head_status(); // успешно; список пуст
  public int get_tail_status(); // успешно; список пуст
  public int get_right_status(); // успешно; правее нету элемента
  public int get_put_right_status(); // успешно; список пуст
  public int get_put_left_status(); // успешно; список пуст
  public int get_remove_status(); // успешно; список пуст
  public int get_replace_status(); // успешно; список пуст
  public int get_find_status(); // следующий найден;
                                // следующий не найден; список пуст
  public int get_get_status(); // успешно; список пуст


//LinkedList
abstract class LinkedList<T> extends ParentList{};

//TwoWayList
abstract class TwoWayList <T> extends ParentList{

    // конструктор
    // постусловие: создан новый пустой список
    public TwoWayList<T> TwoWayList();

    //команда
    // предусловие: левее курсора есть элемент;
    // постусловие: курсор сдвинут на один узел влево
    public void left();

    // запросы статусов (возможные значения статусов)
    public int get_left_status(); // успешно левее нету элемента
};