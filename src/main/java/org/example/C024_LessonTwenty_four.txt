
Решение задания 24.

Пример абстрагирования:
Допустим, у нас есть класс Animal, который представляет общие свойства животных в игре.
Изначально этот класс рассматривался как универсальное представление для всех животных,
но по мере развития проекта стало понятно, что есть специфические случаи.
К примеру, понадобилось создать кошку-привидение (тотемное животное Некроманта)
и летающую собаку (тотемное животное Мага).
Создадим два абстрактных класса Призрак и Летающее Животное и уже через расширение их,
общим классом Животное, создадим наследников, кошку приведение и летающую собаку.

// Базовый класс Животное
class Animal {
    // Общие свойства для всех животных
}

// Абстрактный класс для Привидений
abstract class Ghost extends Animal {
    abstract void invokeTotem();
}

// Абстрактный класс для Летающих Животных
abstract class FlyingAnimal extends Animal {
    abstract void fly();
}

// Конкретный класс для Кошки-Привидения
class GhostCat extends Ghost {
    @Override
    void invokeTotem() {
        System.out.println("Invoking ghostly totem");
    }

    // Дополнительные методы или свойства для Кошки-Привидения
}

// Конкретный класс для Летающей Собаки
class FlyingDog extends FlyingAnimal {
    @Override
    void fly() {
        System.out.println("Flying high");
    }

    // Дополнительные методы или свойства для Летающей Собаки
}

Каждый из этих абстрактных классов определяет свою уникальную функциональность,
которая может быть общей для нескольких видов животных.
Затем мы создали конкретные классы GhostCat и FlyingDog, расширяя соответствующие абстрактные классы.


Пример факторизации:
Рассмотрим пример, где несколько классов, которые изначально не кажутся связанными,
оказываются частными случаями общего понятия.
Пусть у нас есть классы Car, Bicycle и Motorcycle, представляющие транспортные средства.
Мы обнаруживаем, что все они могут быть объединены под общее понятие Vehicle. Создадим общий родительский класс:

// Общий класс для всех транспортных средств
class Vehicle {
    // Общие свойства и методы
}

// Пример конкретных классов
class Car extends Vehicle {
    // Свойства и методы для автомобиля
}

class Bicycle extends Vehicle {
    // Свойства и методы для велосипеда
}

class Motorcycle extends Vehicle {
    // Свойства и методы для мотоцикла
}

Теперь у нас есть факторизация, которая позволяет работать с общим понятием Vehicle,
а также добавлять новые типы транспортных средств без изменения существующего кода.
