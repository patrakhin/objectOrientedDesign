Рефлексия задания 9.

Абстрактный класс определен верно: abstract class PowerSet<T> extends HashTable<T>
Конструктор: public PowerSet<T> PowerSet(int sz);
и постусловие: создано пустое множество на максимальное количество элементов sz
определены верно.
Функции определены верно, но они не являются командами. Команд в классе-наследнике вообще нет.
Соответственно и запросы статусов не верны, т.к. нет предусловий.
Функции, корректно и полностью определены на типе данных, замкнутые на множество.
Функции определил в классы ошибочно - они не меняют состояние класса,
при их выполнении ничего не добавляется или убавляется, либо как то меняется.
У нас есть множество и оно не меняется, результатом работы функций являются новые множества.
Конструктор реализовал ошибочно, из-за того, что "ушел" в реализацию,
а там соответственно различия для хэш таблицы (на массиве)
а для множества на списке.


Решение задания 10.

abstract class BloomFilter<T>

//конструктор
//постуловие: создан пустой фильтр определенного размера
public BloomFilter<T> BloomFilter(int sz);

//команды
//предусловие: входное значение не содержится в фильтре иначе значение в фильтре будет обновлено
//постусловие: добавлено новое значение в фильтр
public void addValue(T value);

//запросы
public boolean isValue(T value); // содержится ли значение в фильтре

//запросы статусов (возможные значения статусов)
public int get_addValue_status(); // успешно // значение обновлено


Реализация задания 10.

public class BloomFilter {

    private int filter_len;
    private int [] tableResult;

    private int get_addValue_status; // статус запроса add()

    // интерфейс класса, реализующий АТД BloomFilter
    public static final int ADD_VALUE_OK = 1;
    public static final int ADD_VALUE_ER = 2;


    public BloomFilter(int f_len)
    {
        filter_len = f_len;
        // create byte array length f_len ...
        tableResult = new int[filter_len];
    }

    // hash-func
    public int hash1(String str1)
    {
        // 17
        int resultHash1 = 0;
        for(int i=0; i<str1.length(); i++)
        {
            int code = str1.charAt(i);
            resultHash1 = ((resultHash1+ code) * 17 ) % filter_len;
        }
        return resultHash1;
    }
    public int hash2(String str1)
    {
        // 223
        int resultHash2 = 0;
        for(int i=0; i<str1.length(); i++)
        {
            int code = str1.charAt(i);
            resultHash2 = (resultHash2 * 223 + code) % filter_len;
        }
        return resultHash2;
    }

    public void add(String str1)
    {
        // add string to filter
        if (isValue(str1.trim())){
            get_addValue_status = ADD_VALUE_ER;
        }
        int buff1 = hash1(str1.trim());
        int buff2 = hash2(str1.trim());
        tableResult [buff1] = 1;
        tableResult [buff2] = 1;
        get_addValue_status = ADD_VALUE_OK;
    }

    public boolean isValue(String str1)
    {
        // check - contain filter this string
        int buff1 = hash1(str1.trim());
        int buff2 = hash2(str1.trim());
        if (tableResult [buff1] == 1 && tableResult [buff2] == 1)
            return true;
        return false;
    }
}