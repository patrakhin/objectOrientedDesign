Решение задания 9.


abstract class ParentHashTable<T>

  // конструктор
  // постусловие: создана пустая хэш-таблица заданного размера
  public HashTable<T> HashTable(int sz);

  // команды
  // предусловие: в таблице имеется свободный слот для value;
  // постусловие: в таблицу добавлено новое значение
  public void put(T value);

  // предусловие: в таблице имеется значение value;
  // постусловие: из таблицы удалено значение value
  public void remove(T value);

  // запросы
  public boolean get(T value); // содержится ли значение value в таблице

  public int size(); // количество элементов в таблице

  // запросы статусов (возможные значения статусов)
  public int get_put_status(); // успешно;
    // система коллизий не смогла найти свободный слот для значения

  public int get_remove_status(); // успешно; значения нету в таблице



abstract class PowerSet<T> extends ParentHashTable<T>

    //конструктор
    //постусловие: создано пустое множество
    //с ограничением на максимальное количество элементов в множестве
    public PowerSet<T> PowerSet(int sz);

    // команды
    // предусловие: в таблице имеется свободное место для value;
    // предусловие: value в таблице нет;
    // постусловие: в таблицу добавлено новое значение
    public void putValue(T value);

    //постусловие: возвращается пересечение множеств
    public PowerSet<T> getIntersection(PowerSet<T> set2);

    //постусловие: возвращается объединение множеств
     public PowerSet<T> getUnion(PowerSet<T> set2);

    //постусловие: возвращается подмножество текущего множества из таких элементов,
    //которые не входят в множество-параметр
     public PowerSet<T> getDifference(PowerSet<T> set2);

    //запросы
    //будет ли множество-параметр подмножеством текущего множества
     public boolean IsSubset(PowerSet<T> set2);

    // запросы статусов (возможные значения статусов)
    public int get_putValue_status(); // успешно; нет места; value в таблице есть