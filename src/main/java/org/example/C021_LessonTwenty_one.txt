
Решение задания 21.

Пример кода на Java, где выполняется "наследование реализации":


class Shape {
    protected double area;

    public Shape() {
        this.area = 0.0;
    }

    public void calculateArea() {
        System.out.println("Calculating area for a generic shape");
    }

    public void displayArea() {
        System.out.println("Area: " + area);
    }
}

class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
        calculateArea(); // Вызов родительского метода для вычисления площади
    }

    @Override
    public void calculateArea() {
        area = Math.PI * radius * radius; // Переопределение метода для конкретной реализации
    }
}

public class InheritanceExample {
    public static void main(String[] args) {
        Circle circle = new Circle(5.0);
        circle.displayArea(); // Вывод площади, унаследованной от родительского класса Shape
    }
}


Здесь класс Circle наследует реализацию метода calculateArea() от класса Shape.
Это "наследование реализации", где подтип (Circle) использует или изменяет реализацию метода из родительского типа (Shape).


Пример кода на Java, где выполняется "льготное наследование":

interface Logger {
    void log(String message);
}

class ConsoleLogger implements Logger {
    @Override
    public void log(String message) {
        System.out.println("Console: " + message);
    }
}

class FileLogger implements Logger {
    @Override
    public void log(String message) {
        // Логика записи в файл
        System.out.println("File: " + message);
    }
}

class Application {
    private Logger logger;

    public Application(Logger logger) {
        this.logger = logger;
    }

    public void doSomething() {
        logger.log("Doing something...");
    }
}

public class FavorableInheritanceExample {
    public static void main(String[] args) {
        ConsoleLogger consoleLogger = new ConsoleLogger();
        Application appWithConsoleLogger = new Application(consoleLogger);
        appWithConsoleLogger.doSomething();

        // В этом случае не происходит наследования реализации, а просто используется интерфейс Logger
        // Логика работы с файлом инкапсулирована внутри FileLogger
        FileLogger fileLogger = new FileLogger();
        Application appWithFileLogger = new Application(fileLogger);
        appWithFileLogger.doSomething();
    }
}

Здесь класс Application "льготно наследует" различные реализации интерфейса Logger
без явного использования наследования в иерархии классов.
Разные реализации Logger передаются в Application через конструктор,
и при этом они легко подменяются без изменения кода Application.








